openapi: 3.0.3
info:
  title: Auth Service API
  description: API for user authentication and authorization in the voting system
  version: 1.0.0
  contact:
    name: Voting System Team
    url: https://github.com/JoelChinoP/voting-system-back
    email: support@voting-system.com

servers:
  - url: http://localhost:8081
    description: Development server

paths:
  /api/v1/auth/register:
    post:
      summary: Register a new user
      description: Register a new user with email and password validation (RF-001)
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario registrado exitosamente"
                  email:
                    type: string
                    example: "user@example.com"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      summary: Authenticate user
      description: Login with email and password to get JWT token (RF-002)
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/status:
    get:
      summary: Service health check
      description: Check if the auth service is running
      operationId: getServiceStatus
      responses:
        '200':
          description: Service is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                    example: "auth-service"
                  status:
                    type: string
                    example: "RUNNING"
                  version:
                    type: string
                    example: "1.0.0"
                  port:
                    type: integer
                    example: 8081
                  timestamp:
                    type: integer
                    format: int64
                  endpoints:
                    type: object

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - fullName
        - username
        - password
      properties:
        fullName:
          type: string
          minLength: 2
          maxLength: 100
          example: "Juan PÃ©rez"
        username:
          type: string
          format: email
          example: "juan@example.com"
        password:
          type: string
          minLength: 8
          pattern: '^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$'
          example: "Password123"
          description: "Must have at least 8 characters, including uppercase, lowercase, and numbers"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: email
          example: "juan@example.com"
        password:
          type: string
          example: "Password123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
        tokenType:
          type: string
          example: "Bearer"
        expiresIn:
          type: integer
          format: int64
          example: 86400
          description: Token expiration time in seconds
        message:
          type: string
          example: "Authentication successful"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
