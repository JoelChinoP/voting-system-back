version: '3.8'

services:
  # PostgreSQL - Para estado de usuarios
  postgres:
    image: postgres:15-alpine
    container_name: voting-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/postgres/01-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./scripts/db/postgres/02-seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - voting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cassandra - Para almacenar votos
  cassandra:
    image: cassandra:4.1
    container_name: voting-cassandra
    environment:
      CASSANDRA_CLUSTER_NAME: voting_cluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_RACK: rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    ports:
      - "9042:9042"
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - voting-network
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 10s
      retries: 10

  # Cassandra Init - Para ejecutar scripts CQL
  cassandra-init:
    image: cassandra:4.1
    container_name: cassandra-init
    depends_on:
      cassandra:
        condition: service_healthy
    volumes:
      - ./scripts/db/cassandra/init.cql:/init.cql
    networks:
      - voting-network
    command: >
      bash -c "
        echo 'Waiting for Cassandra to be ready...'
        until cqlsh cassandra -f /init.cql; do
          echo 'Cassandra is not ready yet, retrying in 10 seconds...'
          sleep 10
        done
        echo 'Cassandra initialized successfully!'
      "

  # Redis - Para soporte de caché y otras funcionalidades
  redis:
    image: redis:7-alpine
    container_name: voting-redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - voting-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service - Servicio de autenticación
  auth-service:
    build:
      context: ../../
      dockerfile: apps/auth-service/Dockerfile
    container_name: auth-service
    depends_on:
      postgres:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      cassandra-init:
        condition: service_completed_successfully
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION_MS=${JWT_EXPIRATION_MS}
      - CASSANDRA_CONTACT_POINTS=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
      - SERVER_PORT=8081
    ports:
      - "8081:8081"
    networks:
      - voting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/auth/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Users Service
  users-service:
    build:
      context: ../../apps/users-service
      dockerfile: Dockerfile
    container_name: users-service
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      AUTH_SERVICE_URL: http://auth-service:8081
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
      SERVER_PORT: 8082
    ports:
      - "8082:8082"
    networks:
      - voting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Votes Service
  votes-service:
    build:
      context: ../../apps/votes-service
      dockerfile: Dockerfile
    container_name: votes-service
    depends_on:
      cassandra:
        condition: service_healthy
      cassandra-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      CASSANDRA_CONTACT_POINTS: ${CASSANDRA_CONTACT_POINTS}
      CASSANDRA_PORT: 9042
      CASSANDRA_KEYSPACE: ${CASSANDRA_KEYSPACE}
      AUTH_SERVICE_URL: http://auth-service:8081
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
      SERVER_PORT: 8083
    ports:
      - "8083:8083"
    networks:
      - voting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
  cassandra_data:
  redis_data:

networks:
  voting-network:
    name: voting-network
    driver: bridge

